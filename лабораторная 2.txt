b2
#include <iostream>
#include <ctime>
#include <locale>
#include <fstream>
#include <string>

using namespace std;

struct employee
{
    string surname;
    string name;
    string patronymic;
    int bdate[3];
    int division;
    string position;
};

employee read_employee(ifstream &file)
{
    employee employees;
    getline(file, employees.surname);
    getline(file, employees.name);
    getline(file, employees.patronymic);
    char bdate_str[20];
    file.getline(bdate_str, 20);
    sscanf(bdate_str, "%d.%d.%d", &employees.bdate[0], &employees.bdate[1], &employees.bdate[2]);
    file >> employees.division;
    file.ignore();
    getline(file, employees.position);
    return employees;
}

void print_employee(employee employees)
{
    cout << "Фамилия: " << employees.surname.c_str() << endl;
    cout << "Имя: " << employees.name.c_str() << endl;
    cout << "Отчество: " << employees.patronymic.c_str() << endl;
    cout << "Дата рождения: " << employees.bdate[0] << "." << employees.bdate[1] << "." << employees.bdate[2] << endl;
    cout << "Номер отдела: " << employees.division << endl;
    cout << "Должность: " << employees.position.c_str() << endl;
}

void find_divisions(employee people[], int numbers, int find_division)
{
    bool found = false;

    for (int i = 0; i < numbers; i++)
    {
        if (people[i].division == find_division)
        {
            found = true;
            cout << "Искомый отдел найден" << endl;
            print_employee(people[i]);
        }
    }

    if (!found)
    {
        cout << "Информация о введенном отделе не найдена" << endl;
    }
}

void find_people(employee people[], int numbers)
{
    bool found = false;
    time_t now = time(0);
    tm *ltm = localtime(&now);
    int year = ltm->tm_year + 1900;
    int month = ltm->tm_mon + 1;
    int day = ltm->tm_mday;

    for (int i = 0; i < numbers; i++)
    {
        int age = year - people[i].bdate[2];
        bool correct = false;
        if (people[i].bdate[0] < 1 || people[i].bdate[1] < 1 || people[i].bdate[1] > 12 || people[i].bdate[2] < 1 || people[i].bdate[2] > year || (people[i].bdate[2] == year && people[i].bdate[1] > month) || (people[i].bdate[2] == year && people[i].bdate[1] == month && people[i].bdate[0] > day)) {
            cout << "Введите корректную дату рождения для человека " << i + 1 << endl;
        } else if ((people[i].bdate[1] == 2 && people[i].bdate[2] % 4 != 0 && people[i].bdate[0] > 28) || (people[i].bdate[1] == 2 && people[i].bdate[2] % 4 == 0 && people[i].bdate[0] > 29)) {
            cout << "Введите корректную дату рождения для человека " << i + 1 << endl;
        } else if ((people[i].bdate[1] == 1 || people[i].bdate[1] == 3 || people[i].bdate[1] == 5 || people[i].bdate[1] == 7 || people[i].bdate[1] == 8 || people[i].bdate[1] == 10 || people[i].bdate[1] == 12) && people[i].bdate[0] > 31) {
            cout << "Введите корректную дату рождения для человека" << i + 1 << endl;
        } else if ((people[i].bdate[1] == 4 || people[i].bdate[1] == 6 || people[i].bdate[1] == 9 || people[i].bdate[1] == 11) && people[i].bdate[0] > 30) {
            cout << "Введите корректную дату рождения для человека" << i + 1 << endl;
        } else {
            correct = true;
        }
        if ((age > 50) || (age == 50 && month > people[i].bdate[1]) || (age == 50 && month == people[i].bdate[1] && day >= people[i].bdate[0]))
        {
            found = true;
            cout << "Люди старше 50 лет" << endl;
            print_employee(people[i]);
        }
    }
    if (!found)
    {
        cout << "Людей старше 50 лет - нет" << endl;
    }
}

int main()
{
    setlocale(LC_ALL, "rus");
    ifstream infile("employee.txt");

    if (!infile)
    {
        cout << "Ошибка открытия файла" << endl;
        return 1;
    }

    int numbers;
    infile >> numbers;
    if (numbers <= 0 || infile.fail())
    {
        cout << "Некорректное значение числа сотрудников" << endl;
        return 1;
    }
    infile.ignore();

    employee *people = new employee[numbers];

    for (int i = 0; i < numbers; i++)
        people[i] = read_employee(infile);
    infile.close();

    for (int i = 0; i < numbers; i++)
        print_employee(people[i]);

    int find_division;
    cout << "Введите номер искомого отдела: ";
    cin >> find_division;
    cin.ignore();
    if (cin.fail() || find_division <= 0 || !isdigit(find_division)) {
        cout << "Некорректный номер отдела" << endl;
        return 0;
    }

    find_divisions(people, numbers, find_division);

    find_people(people, numbers);

    delete[] people;
    return 0;
}
