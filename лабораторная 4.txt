-------------------------------main.cpp-------------------------------------------------
#include <iostream>
#include <string>
#include "company.h"

using namespace std;

int main()
{
    int maximum=0;
    int numbers=0;
    int choice=0;
    int find_division=0;
    while (maximum <= 0 || cin.fail())
    {
        cout << "Введите максимальное количество сотрудников:" << endl;
        cin >> maximum;
        if (maximum <= 0)
        {
            cout << "Введите положительное число!" << endl;
        }
        if (cin.fail())
        {
            cin.clear();
            cin.ignore(256, '\n');
        }
    }
    company myCompany(maximum);
    while (choice != 1 && choice != 2 && choice != 3 && choice != 4)
    {
        
        cout << "\nВыберите действие:\n1 - чтение из файла и вывод на экран\n2 - запись в файл\n3 - добавить сотрудника\n4 - удалить сотрудника" << endl;
        cin >> choice;
        cin.ignore();
        if (cin.fail())
        {
            cout << "Введены некорректные данные!" << endl;
            cin.clear();
            cin.ignore(256, '\n');
            choice = 0;
        }
        if (choice == 1)
        {
            ifstream infile("output.txt");
            if (!infile)
            {
                cout << "Ошибка открытия файла" << endl;
                return 1;
            }
            string line;
            int count = 0;
            while (getline(infile, line))
            {
                count++;
            }
            numbers = count / 7;
            if (numbers>maximum){
                cout << "Людей в файле больше, чем введенное максимальное значение"<< endl;
                cout << "\nЛюдей в файле: " <<  numbers<<endl;
            }
            else
            {
                myCompany.read_from_file("output.txt");
                myCompany.display_all();
            }
        }
        else if (choice == 2)
        {
            ofstream outfile("output.txt");
            if (!outfile)
            {
                cout << "Ошибка открытия файла" << endl;
                return 1;
            }
            while ((numbers <= 0) || (cin.fail()) || (numbers>maximum))
            {
                cout << "Введите  количество сотрудников:" << endl;
                cin >> numbers;
                if (numbers <= 0)
                {
                    cout << "Введите число больше 0" << endl;
                }
                if (cin.fail())
                {
                    cin.clear();
                    cin.ignore(256, '\n');
                }
                if (numbers>maximum){
                cout << "Число сотрудников превышает максимальное значение!"<< endl;
                }
            }
            myCompany.write_to_file("output.txt", numbers);
        }
        else if (choice == 3)
        {
            employee add_employee;
            myCompany.add_person(add_employee);
        }
        else if (choice == 4){
            myCompany.delete_person();
        }
    }
    while (find_division <= 0)
    {
        cout << "\nВведите номер искомого отдела:" << endl;
        cin >> find_division;
        if (find_division<=0){
            cout << "Введите число больше 0" << endl;
        }
        if (cin.fail())
        {
            cin.clear();
            cin.ignore(256, '\n');
        }
    }
    myCompany.find_divisions(find_division);
    myCompany.find_people();
    return 0;
}
------------------------------------------------------------------------------------------------------
-------------------------------------------------employee.h------------------------------------------
#include <string>
#include <fstream>
#include <iostream>

using namespace std;

class employee
{
    private:
        string surname;
        string name;
        string patronymic;
        int bdate[3];
        int division;
        string position;
    public:
        void write_to(ofstream& outfile); 
        void read_from(ifstream &file);
        void display();
        string get_surname(){
            return this -> surname;
        };
        string get_name(){
            return this -> name;
        };
        string get_patronymic(){
            return this -> patronymic;
        };
        int *get_bdate(){
            return this -> bdate;
        };
        int get_division(){
            return this -> division;
        };
        string get_position(){
            return this -> position;
        };
};
---------------------------------------------------------------------------------------------------------
-------------------------------------employee.cpp----------------------------------

#include <iostream>
#include <fstream>
#include <ctime>
#include <limits>
#include "employee.h"

using namespace std;

void employee::read_from(ifstream &file)
{
    getline(file, surname);
    getline(file, name);
    getline(file, patronymic);
    char bdate_str[20];
    file.getline(bdate_str, 20);
    sscanf(bdate_str, "%d.%d.%d", &bdate[0], &bdate[1], &bdate[2]);
    file >> division;
    file.ignore();
    getline(file, position);
    file.ignore();
}

void employee::write_to(ofstream& outfile) 
{
    
    time_t now = time(0);
    tm *ltm = localtime(&now);
    int year = ltm->tm_year + 1900;
    int month = ltm->tm_mon + 1;
    int day = ltm->tm_mday;
    int result;
    cout << "Введите фамилию: ";
    cin >> surname;
    cout << "Введите имя: ";
    cin >> name;
    cout << "Введите отчество: ";
    cin >> patronymic;
    bool correct=false;
    while (correct != true) 
    {
        cout << "Введите дату рождения в формате ДД.ММ.ГГГГ: ";
        cin >> bdate[0];
        cin.ignore(1, '.');
        cin >> bdate[1];
        cin.ignore(1, '.');
        cin >> bdate[2];
        if (bdate[0] < 1 || bdate[1] < 1 || bdate[1] > 12 || bdate[2] < 1 || bdate[2] > year || bdate[2]<1900 || (bdate[2] == year && bdate[1] > month) || (bdate[2] == year && bdate[1] == month && bdate[0] > day)) {
            cout << "Введите корректные данные!" << endl;
        } else if ((bdate[1] == 2 && bdate[2] % 4 != 0 && bdate[0] > 28) || (bdate[1] == 2 && bdate[2] % 4 == 0 && bdate[0] > 29)) {
            cout << "Введите корректные данные!" << endl;
        } else if ((bdate[1] == 1 || bdate[1] == 3 || bdate[1] == 5 || bdate[1] == 7 || bdate[1] == 8 || bdate[1] == 10 || bdate[1] == 12) && bdate[0] > 31) {
            cout << "Введите корректные данные!" << endl;
        } else if ((bdate[1] == 4 || bdate[1] == 6 || bdate[1] == 9 || bdate[1] == 11) && bdate[0] > 30) {
            cout << "Введите корректные данные!" << endl;
        }else {
            correct = true;
        }
    }
    bool corect=false;
    while (!corect)
    {
        cout << "Введите номер отдела: " << endl;
        cin >> division;
        if (division <= 0 || cin.fail())
        {
            cin.clear();
            cin.ignore(256, '\n');
            cout << "Введите положительное число!" << endl;
        }
        else
        {
            corect = true;
        }
    }
    cout << "Введите должность: ";
    cin >> position;
    outfile << surname << endl;
    outfile << name << endl;
    outfile << patronymic << endl;
    outfile << bdate[0] << "." << bdate[1] << "." << bdate[2] << endl;
    outfile << division << endl;
    outfile << position<< endl;
    outfile << "\n";
}
void employee::display()
{
    cout << "Фамилия: " << surname << endl;
    cout << "Имя: " << name << endl;
    cout << "Отчество: " << patronymic << endl;
    cout << "Дата рождения: " << bdate[0] << "." << bdate[1] << "." << bdate[2] << endl;
    cout << "Номер отдела: " << division << endl;
    cout << "Должность: " << position << "\n" << endl;
}
-------------------------------------------------------------------------------------------------
------------------------------------------company.h----------------------------------------------
#include <string>
#include <fstream>
#include <iostream>
#include "employee.h"

using namespace std;

class company
{
    private:
        int max_number;
        int numbers;
        employee * employees;
    public:
        company(unsigned int maximum);
        ~company();
        
        void add_person(employee add_employee);
        void read_from_file(string filename);
        void write_to_file(string filename, int numbers);
        void display_all();
        void delete_person();
        void find_divisions(int find_division);
        void find_people();
};
----------------------------------------------------------------------------------------------------------
------------------------------company.cpp-----------------------------------------------
#include <iostream>
#include <fstream>
#include <ctime>
#include <string>
#include <locale>
#include "company.h"

using namespace std;

company::company(unsigned int maximum)
{
    max_number = maximum;
    employees = new employee[max_number];
    int numbers=0;
    cout<<"Вызван конструктор класса"<<endl;
    cout<<"Максимальное число сотрудников: "<<max_number<<endl;
}

company::~company()
{
    max_number = 0;
    delete[] employees;
    numbers = 0;
    cout<<"\nВызван деструктор - память освобождена";
}

void company::read_from_file(string filename)
{
    ifstream infile(filename);
    if (!infile)
    {
        cout << "\nОшибка открытия файла!" << endl;
        exit(1);
    }
    string line;
    int count = 0;
    while (getline(infile, line))
    {
        count++;
    }
    numbers = count / 7;
    infile.clear(); 
    infile.seekg(0, ios::beg);
    for (int i = 0; i <  numbers; i++)
    {
        employee new_employee;
        new_employee.read_from(infile);
        if ( numbers <= max_number)
        {
            employees[i] = new_employee;
        }
    }
    infile.close();
}

void company::write_to_file(string filename, int numbers)
{
    ofstream outfile(filename); 
    if (!outfile)
    {
        cout << "Ошибка открытия файла!" << endl;
        return;
    }
    for (int i = 0; i < numbers; i++)
    {
        employees[i].write_to(outfile); 
    }

    outfile.close();
}

void company::display_all()
{
    cout << "\nДанные о введенных сотрудниках:"<< endl;
    for(int i = 0; i<numbers; i++)
    {
        employees[i].display();    
    }
}
void company::delete_person() 
{
    ifstream infile("output.txt");
    if (!infile)
    {
        cout << "\nОшибка открытия файла!" << endl;
        exit(1);
    }
    string line;
    int count = 0;
    while (getline(infile, line))
    {
        count++;
    }
    int numbers = count / 7;
    infile.clear(); 
    infile.seekg(0, ios::beg);
    string* employees = new string[numbers * 7];
    for (int i = 0; i < numbers * 7; i++)
    {
        getline(infile, employees[i]);
    }
    infile.close();
    int index;
    cout << "Введите номер сотрудника, которого вы хотите удалить: " << endl;
    cin >> index;
    if (index < 1 || index > numbers)
    {
        delete[] employees;
        cout << "Такого сотрудника нет!" << endl;
        return;
    }
    index--;
    for (int i = index * 7; i < (numbers - 1) * 7; i++)
    {
        employees[i] = employees[i + 7];
    }
    numbers--;

    ofstream outfile("output.txt");
    if (!outfile)
    {
        delete[] employees;
        cout << "Ошибка открытия файла!" << endl;
        exit(1);
    }

    for (int i = 0; i < numbers * 7; i++)
    {
        outfile << employees[i] << endl;
    }

    delete[] employees;
    outfile.close();
}

void company::add_person(employee add_employee)
{
    ifstream infile("output.txt");
    if (!infile)
    {
        cout << "Ошибка открытия файла" << endl;
        exit(1);
    }
    
    string line;
    int count = 0;
    while (getline(infile, line))
    {
        count++;
    }
    infile.close();
    
    int N = count / 7;
    
    ofstream outfile("output.txt", ios::app); 
    if (!outfile)
    {
        cout << "Ошибка открытия файла" << endl;
        exit(1);
    }
    
    cout << "Сотрудников в файле: " << N << endl;
    
    if (N < max_number)
    {
        N++; 
        
        cout << "Добавление нового сотрудника" << endl;
        add_employee.write_to(outfile);
    }
    else
    {
        cout << "Достигнуто максимальное число сотрудников" << endl;
    }
    
    outfile.close();
}

void company::find_divisions(int find_division)
{
    ifstream infile("output.txt");
    if (!infile)
    {
        cout << "\nОшибка открытия файла" << endl;
        exit(1);
    }
    string line;
    int count = 0;
    while (getline(infile, line))
    {
        count++;
    }
    int numbers = count / 7;
    infile.clear();
    infile.seekg(0, ios::beg);
    employee* people = new employee[numbers];
    bool found = false;
    for (int i = 0; i < numbers; i++)
    {
        people[i].read_from(infile);
        if (people[i].get_division() == find_division)
        {
            found = true;
            cout << "Искомый отдел найден" << endl;
            people[i].display();
        }
    }
    if (!found)
    {
        cout << "Информация о введенном отделе не найдена" << endl;
    }
    delete[] people;
}

void company::find_people()
{
    ifstream infile("output.txt");
    if (!infile)
    {
        cout << "\nОшибка открытия файла" << endl;
        exit(1);
    }
    string line;
    int count = 0;
    while (getline(infile, line))
    {
        count++;
    }
    int numbers = count / 7;
    infile.clear();
    infile.seekg(0, ios::beg);
    employee* people = new employee[numbers];
    for (int i = 0; i < numbers; i++)
    {
        people[i].read_from(infile);
    }
    bool found = false;
    time_t now = time(0);
    tm *ltm = localtime(&now);
    int year = ltm->tm_year + 1900;
    int month = ltm->tm_mon + 1;
    int day = ltm->tm_mday;
    for (int i = 0; i < numbers; i++)
    {
        int age = year - people[i].get_bdate()[2];
        if ((age > 50) || (age == 50 && month > people[i].get_bdate()[1]) ||
            (age == 50 && month == people[i].get_bdate()[1] && day >= people[i].get_bdate()[0]))
        {
            found = true;
            cout << "\nЛюди старше 50 лет" << endl;
            people[i].display();
        }
    }
    if (!found)
    {
        cout << "\nЛюдей старше 50 лет - нет" << endl;
    }
    delete[] people;
}