#include <iostream>
#include <ctime>
#include <fstream>
#include <string>
#include <locale>
#include "employee.h"

using namespace std;

int main()
{
    setlocale(LC_ALL, "rus");
    int choice;
    while (choice != 1 && choice != 2 && choice != 3 && choice != 4) {
        cout << "Выберите способ ввода данных:\n1 - чтение из файла\n2 - вручную с клавиатуры\n3 - запись в текстовый файл" << endl;
        cin >> choice;
        cin.ignore();
    }

    employee *people;
    int numbers;

    if (choice == 1)
    {
        ifstream infile("employee.txt");

        if (!infile)
        {
            cout << "Ошибка открытия файла" << endl;
            return 1;
        }

        infile >> numbers;
        infile.ignore();

        if (numbers <= 0 || infile.fail())
        {
            cout << "Некорректное значение числа сотрудников" << endl;
            return 1;
        }

        people = new employee[numbers];

        for (int i = 0; i < numbers; i++)
            people[i].read_employee(infile);

        infile.close();
    }
    else if (choice == 2)
    {
        while (numbers<=0){
            cout << "Введите количество сотрудников:" << endl;
            cin >> numbers;
            if (numbers<=0){
                cout << "Введите число больше 0" << endl;
            }
        }
        people = new employee[numbers];
        for (int i = 0; i < numbers; i++)
        {
            cout << "\nСотрудник №" << i + 1 << endl;
            people[i].keyboard_employee(numbers);
        }
    }
    else if (choice == 3)
    {
        while (numbers <= 0) {
            cout << "Введите количество сотрудников:" << endl;
            cin >> numbers;
            if (numbers <= 0) {
                cout << "Введите число больше 0" << endl;
            }
        }
        people = new employee[numbers];
        string fileName = "output.txt";
        for (int i = 0; i < numbers; i++)
        {
            people[i].writeToFile(fileName);
        }
    }
    int find_division;
    while (find_division <= 0){
            cout << "\nВведите номер искомого отдела:" << endl;
            cin >> find_division;
            if (find_division<=0){
                cout << "Введите число больше 0" << endl;
            }
        }
    find_divisions(people, numbers, find_division);
    find_people(people, numbers);

    delete[] people;
    return 0;
}










#include <iostream>
#include <fstream>
#include <ctime>
#include "employee.h"

using namespace std;

void employee::keyboard_employee(int numbers)
{
    time_t now = time(0);
    tm *ltm = localtime(&now);
    int year = ltm->tm_year + 1900;
    int month = ltm->tm_mon + 1;
    int day = ltm->tm_mday;
    int result;

    cout << "\nВведите фамилию:";
    cin >> surname;
    cout << "Введите имя:";
    cin >> name;
    cout << "Введите отчество:";
    cin >> patronymic;
    bool correct = false;
    while (correct != true) {
        cout << "Введите дату рождения в формате ДД.ММ.ГГГГ: ";
        cin >> bdate[0];
        cin.ignore(1, '.');
        cin >> bdate[1];
        cin.ignore(1, '.');
        cin >> bdate[2];
        if (bdate[0] < 1 || bdate[1] < 1 || bdate[1] > 12 || bdate[2] < 1 || bdate[2] > year || (bdate[2] == year && bdate[1] > month) || (bdate[2] == year && bdate[1] == month && bdate[0] > day)) {
            cout << "Введите корректные данные" << endl;
        } else if ((bdate[1] == 2 && bdate[2] % 4 != 0 && bdate[0] > 28) || (bdate[1] == 2 && bdate[2] % 4 == 0 && bdate[0] > 29)) {
            cout << "Введите корректные данные" << endl;
        } else if ((bdate[1] == 1 || bdate[1] == 3 || bdate[1] == 5 || bdate[1] == 7 || bdate[1] == 8 || bdate[1] == 10 || bdate[1] == 12) && bdate[0] > 31) {
            cout << "Введите корректные данные" << endl;
        } else if ((bdate[1] == 4 || bdate[1] == 6 || bdate[1] == 9 || bdate[1] == 11) && bdate[0] > 30) {
            cout << "Введите корректные данные" << endl;
        } else {
            correct = true;
        }
    }
    do
    {
        cout << "\nВведите номер отдела: ";
        cin >> division;
        cin.ignore();
    } while (division <= 0);
    
    cout << "Введите должность: ";
    getline(cin, position);
}

void employee::read_employee(ifstream &file)
{
    getline(file, surname);
    getline(file, name);
    getline(file, patronymic);
    char bdate_str[20];
    file.getline(bdate_str, 20);
    sscanf(bdate_str, "%d.%d.%d", &bdate[0], &bdate[1], &bdate[2]);
    file >> division;
    file.ignore();
    getline(file, position);
}

void employee::display()
{
    cout << "Фамилия: " << surname << endl;
    cout << "Имя: " << name << endl;
    cout << "Отчество: " << patronymic << endl;
    cout << "Дата рождения: " << bdate[0] << "." << bdate[1] << "." << bdate[2] << endl;
    cout << "Номер отдела: " << division << endl;
    cout << "Должность: " << position << "\n" << endl;
}

string employee::get_surname()
{
    return surname;
}

string employee::get_name()
{
    return name;
}

string employee::get_patronymic()
{
    return patronymic;
}

int *employee::get_bdate()
{
    return bdate;
}

int employee::get_division()
{
    return division;
}

string employee::get_position()
{
    return position;
}

void employee::writeToFile(const string& fileName) {
    ofstream outfile(fileName, ios::app);
    if (!outfile) {
        cout << "Ошибка открытия файла" << endl;
        return;
    }
    
    cout << "Введите фамилию: ";
    cin >> surname;
    cout << "Введите имя: ";
    cin >> name;
    cout << "Введите отчество: ";
    cin >> patronymic;
    cout << "Введите дату рождения в формате ДД.ММ.ГГГГ: ";
    cin >> bdate[0];
    cin.ignore(1, '.');
    cin >> bdate[1];
    cin.ignore(1, '.');
    cin >> bdate[2];
    cout << "Введите номер отдела: ";
    cin >> division;
    cout << "Введите должность: ";
    cin >> position;
    
    outfile << surname << endl;
    outfile << name << endl;
    outfile << patronymic << endl;
    outfile << bdate[0] << "." << bdate[1] << "." << bdate[2] << endl;
    outfile << division << endl;
    outfile << position << endl;
    
    outfile.close();
}

void find_divisions(employee people[], int numbers, int find_division)
{
    bool found = false;

    for (int i = 0; i < numbers; i++)
    {
        if (people[i].get_division() == find_division)
        {
            found = true;
            cout << "Искомый отдел найден" << endl;
            people[i].display();
        }
    }

    if (!found)
    {
        cout << "Информация о введенном отделе не найдена" << endl;
    }
}

void find_people(employee people[], int numbers)
{
    bool found = false;
    time_t now = time(0);
    tm *ltm = localtime(&now);
    int year = ltm->tm_year + 1900;
    int month = ltm->tm_mon + 1;
    int day = ltm->tm_mday;

    for (int i = 0; i < numbers; i++)
    {
        int age = year - people[i].get_bdate()[2];
        bool correct = false;

        if (people[i].get_bdate()[0] < 1 || people[i].get_bdate()[1] < 1 || people[i].get_bdate()[1] > 12 ||
            people[i].get_bdate()[2] < 1 || people[i].get_bdate()[2] > year ||
            (people[i].get_bdate()[2] == year && people[i].get_bdate()[1] > month) ||
            (people[i].get_bdate()[2] == year && people[i].get_bdate()[1] == month && people[i].get_bdate()[0] > day))
        {
            cout << "Введите корректную дату рождения для человека " << i + 1 << endl;
        }
        else if ((people[i].get_bdate()[1] == 2 && people[i].get_bdate()[2] % 4 != 0 && people[i].get_bdate()[0] > 28) ||
                 (people[i].get_bdate()[1] == 2 && people[i].get_bdate()[2] % 4 == 0 && people[i].get_bdate()[0] > 29) ||
                 ((people[i].get_bdate()[1] == 4 || people[i].get_bdate()[1] == 6 ||
                   people[i].get_bdate()[1] == 9 || people[i].get_bdate()[1] == 11) && people[i].get_bdate()[0] > 30))
        {
            cout << "Введите корректную дату рождения для человека " << i + 1 << endl;
        }
        else
        {
            correct = true;
        }

        if ((age > 50) || (age == 50 && month > people[i].get_bdate()[1]) ||
            (age == 50 && month == people[i].get_bdate()[1] && day >= people[i].get_bdate()[0]))
        {
            found = true;
            cout << "\nЛюди старше 50 лет" << endl;
            people[i].display();
        }
    }

    if (!found)
    {
        cout << "\nЛюдей старше 50 лет - нет" << endl;
    }
}









#include <string>
#include <fstream>
#include <iostream>

using namespace std;

class employee
{
    private:
        string surname;
        string name;
        string patronymic;
        int bdate[3];
        int division;
        string position;

    public:
        void writeToFile(const string& fileName); 
        void read_employee(ifstream &file);
        void keyboard_employee(int numbers);
        void display();
        string get_surname();
        string get_name();
        string get_patronymic();
        int *get_bdate();
        int get_division();
        string get_position();
};

void find_divisions(employee people[], int numbers, int find_division);
void find_people(employee people[], int numbers);






