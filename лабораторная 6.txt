----------------------------------------------------------
employee.h
-----------------------------------------------------
#include <string>
using namespace std;
class employee
{
    protected:
        string surname;
        string name;
        string patronymic;
        int bdate[3];
        int division;
        string position;
    public:
        void write_to(ofstream& outfile); 
        
        string get_surname(){return this -> surname;};
        string get_name(){return this -> name;};
        string get_patronymic(){return this -> patronymic;};
        int *get_bdate(){return this -> bdate;};
        int get_division(){return this -> division;};
        string get_position(){return this -> position;};
        
        virtual void display();
        virtual void read_from_file(ifstream &stream);
        virtual void write_to_file(ofstream &stream);
};

class work_out : public employee
{
    protected:
        string device_to_work;
        int number_phone;
    
    public:
    
    int get_cabinet(){return this -> cabinet;};
    string get_city_office(){return this ->  city_office;}
    
    virtual void display();
    virtual void read_from_file(ifstream &stream);
    virtual void write_to_file(ofstream &stream);
    
};

class physics_ofice : public employee
{
    protected:
        int cabinet;
        string city_office;
    public:
    
    string get_device_to_work(){return this -> device_to_work;};
    int get_number_phone(){return this -> number_phone;};
    
    virtual void display();
    virtual void read_from_file(ifstream &stream);
    virtual void write_to_file(ofstream &stream);
};





----------------------------------------------------------
employee.cpp
-----------------------------------------------------
#include <iostream>
#include <fstream>
#include <ctime>
#include <limits>
#include <cstring>
#include "employee.h"

using namespace std;

void employee::display()
{
    cout << "Фамилия: " << surname << endl;
    cout << "Имя: " << name << endl;
    cout << "Отчество: " << patronymic << endl;
    cout << "Дата рождения: " << bdate[0] << "." << bdate[1] << "." << bdate[2] << endl;
    cout << "Номер отдела: " << division << endl;
    cout << "Должность: " << position << "\n" << endl;
}

void employee::read_from_file(ifstream &stream)
{
    getline(file, surname);
    getline(file, name);
    getline(file, patronymic);
    char bdate_str[20];
    file.getline(bdate_str, 20);
    sscanf(bdate_str, "%d.%d.%d", &bdate[0], &bdate[1], &bdate[2]);
    file >> division;
    file.ignore();
    getline(file, position);
    file.ignore();
}

void employee::write_to_file(ofstream &stream)
{
    time_t now = time(0);
    tm *ltm = localtime(&now);
    int year = ltm->tm_year + 1900;
    int month = ltm->tm_mon + 1;
    int day = ltm->tm_mday;
    int result;
    
    bool found1 = false;

    string symbol = "*[]{}+=-&^:;/><$#@.,!?№%()'_";
    symbol += '"';

    do {
        found1 = false;
        cout << "Введите фамилию: ";
        cin >> surname;
        for (int i = 0; i < symbol.length(); i++) {
            if (surname.find(symbol[i]) != string::npos) {
                cout << "Фамилия содержит недопустимые символы" << endl;
                found1 = true;
            }
        }
    } while (found1);

    do {
        found1 = false;
        cout << "Введите имя: ";
        cin >> name;
        for (int i = 0; i < symbol.length(); i++) {
            if (name.find(symbol[i]) != string::npos) {
                cout << "Имя содержит недопустимые символы" << endl;
                found1 = true;
            }
        }
    } while (found1);

    do {
        found1 = false;
        cout << "Введите отчество: ";
        cin >> patronymic;
        for (int i = 0; i < symbol.length(); i++) {
            if (patronymic.find(symbol[i]) != string::npos) {
                cout << "Отчество содержит недопустимые символы" << endl;
                found1 = true;
            }
        }
    } while (found1);
    
    bool correct=false;
    while (correct != true) 
    {
        cout << "Введите дату рождения в формате ДД.ММ.ГГГГ: ";
        cin >> bdate[0];
        cin.ignore(1, '.');
        cin >> bdate[1];
        cin.ignore(1, '.');
        cin >> bdate[2];
        if (bdate[0] < 1 || bdate[1] < 1 || bdate[1] > 12 || bdate[2] < 1 || bdate[2] > year || bdate[2]<1900 || (bdate[2] == year && bdate[1] > month) || (bdate[2] == year && bdate[1] == month && bdate[0] > day)) {
            cout << "Введите корректные данные!" << endl;
        } else if ((bdate[1] == 2 && bdate[2] % 4 != 0 && bdate[0] > 28) || (bdate[1] == 2 && bdate[2] % 4 == 0 && bdate[0] > 29)) {
            cout << "Введите корректные данные!" << endl;
        } else if ((bdate[1] == 1 || bdate[1] == 3 || bdate[1] == 5 || bdate[1] == 7 || bdate[1] == 8 || bdate[1] == 10 || bdate[1] == 12) && bdate[0] > 31) {
            cout << "Введите корректные данные!" << endl;
        } else if ((bdate[1] == 4 || bdate[1] == 6 || bdate[1] == 9 || bdate[1] == 11) && bdate[0] > 30) {
            cout << "Введите корректные данные!" << endl;
        }else {
            correct = true;
        }
    }
    cout << "Введите номер отдела: ";
    while (!(cin >> division) || division <= 0)
    {
        cout << "Введите положительное число!" << endl;
        cin.clear();
        cin.ignore(256,'\n');
    }
    do {
        found1 = false;
        cout << "Введите должность: ";
        cin >> position;
        for (int i = 0; i < symbol.length(); i++) {
            if (position.find(symbol[i]) != string::npos) {
                cout << "Должность содержит недопустимые символы" << endl;
                found1 = true;
            }
        }
    } while (found1);
    ofstream my_outfile("output.txt", ios::app);
    if (!my_outfile)
    {
        cout << "Ошибка открытия файла " << endl;
        exit(1);
    }
    outfile << *this;
    my_outfile.close();
}

void work_out::display()
{
    employee::display();
    cout<<"Устройство для работы:" <<endl;
    cout <<"Номер телефона:" <<endl;
}

void physics_office::display()
{
    employee::display();
    cout<<"Город, в котором находится офис:" <<endl;
    cout <<"Номер кабинета сотрудника:" <<endl;
}



---------------------------------------------------------------
company.h
--------------------------------------------------------------
#include <string>
#include <fstream>
#include <iostream>
#include "employee.h"

using namespace std;

class company
{
    private:
        int max_number;
        int numbers;
        employee ** employees;
    public:
        company(unsigned int maximum);
        ~company();
        
        void operator +=(employee &emp);
        void operator -=(employee &emp);
        
        void read_from_file(string filename);
        void write_to_file(string filename, int numbers);
        void find_divisions(int find_division);
        void find_people();
        
        bool check_ifile(ifstream& file, string filename);
        bool check_ofile(ofstream& file, string filename);
        int calculation_count();
};

---------------------------------------------------------------
company.cpp
--------------------------------------------------------------
#include <iostream>
#include <fstream>
#include <ctime>
#include <string>
#include <locale>
#include "company.h"

using namespace std;

company::company(unsigned int maximum)
{
    max_number = maximum;
    max_number1 = maximum;
    employees = new employee[max_number];
    employees1 = new info[max_number1];
    int numbers=0;
    int numbers1=0;
    cout<<"Максимальное число сотрудников: "<<max_number<<endl;
}

company::~company()
{
    max_number = 0;
    delete[] employees;
    numbers = 0;
}

bool company::check_ifile(ifstream& file, string filename)
{
    if (!file)
    {
        cout << "Ошибка открытия файла " << filename << "!" << endl;
        return false;
    }
    return true;
}

bool company::check_ofile(ofstream& file, string filename)
{
    if (!file)
    {
        cout << "Ошибка открытия файла " << filename << "!" << endl;
        return false;
    }
    return true;
}

int company::calculation_count()
{
    ifstream infile("output.txt");
    check_ifile(infile, "output.txt");
    string line;
    int count = 0;
    while (getline(infile, line))
    {
        count++;
    }
    infile.clear(); 
    infile.seekg(0, ios::beg);
    return count;
}

void company::read_from_file(string filename)
{
    ifstream infile("output.txt");
    check_ifile(infile, "output.txt");
    
    int count = calculation_count();
    numbers = count / 7;
    
    for (int i = 0; i <  numbers; i++)
    {
        employee new_employee;
        infile >> new_employee;
        if ( numbers <= max_number)
        {
            employees[i] = new_employee;
        }
    }
    infile.close();
}

void company::write_to_file(string filename, int numbers)
{
    ofstream outfile("output.txt");
    check_ofile(outfile, "output.txt");
    
    for (int i = 0; i < numbers; i++)
    {
        employees[i].write_to(outfile); 
    }
    outfile.close();
}

void company::operator +=(employee &emp)
{
    ifstream infile("output.txt");
    check_ifile(infile, "output.txt");
    
    int count = calculation_count();
    int N = count / 7;
    
    ofstream outfile("output.txt", ios::app); 
    check_ofile(outfile, "output.txt");
    
    cout << "Сотрудников в файле: " << N << endl;
    if (N < max_number)
    {
        N++; 
        
        cout << "Добавление нового сотрудника" << endl;
        emp.write_to(outfile);  
    }
    else
    {
        cout << "Достигнуто максимальное число сотрудников" << endl;
    }
    outfile.close();
}

void company::operator -=( employee &emp)
{
    ifstream infile("output.txt");
    check_ifile(infile, "output.txt");
    
    int count = calculation_count();
    numbers = count / 7;
    string* employees = new string[numbers * 7];
    
    for (int i = 0; i < numbers * 7; i++)
    {
        getline(infile, employees[i]);
    }
    infile.close();
    
    int index;
    cout << "Введите номер сотрудника, которого вы хотите удалить: " << endl;
    cin >> index;
    if (index < 1 || index > numbers)
    {
        delete[] employees;
        cout << "Такого сотрудника нет!" << endl;
        return;
    }
    index--;
    for (int i = index * 7; i < (numbers - 1) * 7; i++)
    {
        employees[i] = employees[i + 7];
    }
    numbers--;

    ofstream outfile("output.txt");
    check_ofile(outfile, "output.txt");

    for (int i = 0; i < numbers * 7; i++)
    {
        outfile << employees[i] << endl;
    }

    delete[] employees;
    outfile.close();
}


void company::find_divisions(int find_division)
{
    ifstream infile("output.txt");
    check_ifile(infile, "output.txt");
    
    int count = calculation_count();
    numbers = count / 7;
    employee* people = new employee[numbers];
    
    bool found = false;
    for (int i = 0; i < numbers; i++)
    {
        infile >> people[i];
        if (people[i].get_division() == find_division)
        {
            found = true;
            cout << "\nИскомый отдел найден" << endl;
            cout << people[i];
        }
    }
    if (!found)
    {
        cout << "Информация о введенном отделе не найдена" << endl;
    }
    delete[] people;
}

void company::find_people()
{
    ifstream infile("output.txt");
    check_ifile(infile, "output.txt");
    
    int count = calculation_count();
    numbers = count / 7;
    employee* people = new employee[numbers];
    
    for (int i = 0; i < numbers; i++)
    {
        infile >> people[i];
    }
    bool found = false;
    time_t now = time(0);
    tm *ltm = localtime(&now);
    int year = ltm->tm_year + 1900;
    int month = ltm->tm_mon + 1;
    int day = ltm->tm_mday;
    for (int i = 0; i < numbers; i++)
    {
        int age = year - people[i].get_bdate()[2];
        if ((age > 50) || (age == 50 && month > people[i].get_bdate()[1]) ||
            (age == 50 && month == people[i].get_bdate()[1] && day >= people[i].get_bdate()[0]))
        {
            found = true;
            cout << "\nЛюди старше 50 лет" << endl;
            cout << people[i];
        }
    }
    if (!found)
    {
        cout << "\nЛюдей старше 50 лет - нет" << endl;
    }
    delete[] people;
}

